# Step 1: Use the official Node.js image from Docker Hub as the build environment
FROM node:18-alpine AS build

# Step 2: Set the working directory inside the container to /usr/src/app/Frontend
WORKDIR /usr/src/app/Frontend

# Step 3: Copy the package.json and package-lock.json files into the container 
# to leverage Docker’s cache for installing dependencies
COPY ./package*.json ./

# Step 4: Install the project dependencies using npm
RUN npm install

# Step 5: Copy the rest of the application’s source code into the container
COPY . .

# Step 6: Set the environment variable during the build (Make sure this is passed correctly)
ARG REACT_APP_backendURL
ENV REACT_APP_backendURL=$REACT_APP_backendURL

# Step 7: Build the React app for production (this creates the 'build' directory)
RUN npm run build

# Step 8: Use the official Nginx image to serve the production build of the React app
FROM nginx:alpine

# Step 9: Copy the production build from the previous build stage into the Nginx server's root directory
# The 'build' folder contains the optimized static assets generated by 'npm run build'
COPY --from=build /usr/src/app/Frontend/build /usr/share/nginx/html

# Step 10: Expose port 80 so the app can be accessed through the Nginx server
EXPOSE 80

# Step 11: Run Nginx in the foreground to serve the React app
CMD ["nginx", "-g", "daemon off;"]